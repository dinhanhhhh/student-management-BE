// routes/student.routes.js
const express = require("express");
const mongoose = require("mongoose");
const router = express.Router();
const ctrl = require("../controllers/student.controller");
const { auth, requireRole } = require("../middlewares/auth");

// Validate ObjectId cho tham s·ªë :id (n·∫øu c√≥)
function validateObjectId(req, res, next) {
  const id = req.params.id;
  if (id && !mongoose.Types.ObjectId.isValid(id)) {
    return res.status(400).json({ message: "Invalid ID" });
  }
  next();
}

/**
 * RBAC:
 * - admin, teacher: xem danh s√°ch & chi ti·∫øt
 * - admin: t·∫°o/s·ª≠a/xo√°
 * - student: xem h·ªì s∆° c·ªßa CH√çNH M√åNH qua /me/profile
 */

// T·∫•t c·∫£ route b√™n d∆∞·ªõi ƒë·ªÅu y√™u c·∫ßu ƒëƒÉng nh·∫≠p
router.use(auth);

// üîπ Sinh vi√™n xem h·ªì s∆° c·ªßa ch√≠nh m√¨nh (ƒê·∫∂T TR∆Ø·ªöC /:id)
router.get("/me/profile", async (req, res, next) => {
  try {
    if (req.user.role !== "student" || !req.user.studentRef) {
      return res.status(403).json({ message: "Forbidden" });
    }
    req.params.id = req.user.studentRef; // t√°i d√πng controller getById
    return ctrl.getStudentById(req, res, next);
  } catch (e) {
    next(e);
  }
});

// Danh s√°ch & chi ti·∫øt (admin/teacher)
router.get("/", requireRole("admin", "teacher"), ctrl.getAllStudents);
router.get(
  "/:id",
  requireRole("admin", "teacher"),
  validateObjectId,
  ctrl.getStudentById
);

// T·∫°o/S·ª≠a/Xo√° ch·ªâ admin
router.post("/", requireRole("admin"), ctrl.createStudent);
router.put("/:id", requireRole("admin"), validateObjectId, ctrl.updateStudent);
router.delete(
  "/:id",
  requireRole("admin"),
  validateObjectId,
  ctrl.deleteStudent
);

module.exports = router;
