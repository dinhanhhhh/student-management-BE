// seed/scores.js
const mongoose = require("mongoose");
const dotenv = require("dotenv");
const Score = require("../models/Score");
const Student = require("../models/Student");
const Subject = require("../models/Subject");

dotenv.config();

const MONGO_URI = process.env.MONGO_URI;

// C√°c h·ªçc k·ª≥ mu·ªën seed
const TERMS = ["2025-1", "2025-2"];

// (Tu·ª≥ ch·ªçn) Danh s√°ch code m√¥n k·ª≥ v·ªçng c√≥ s·∫µn (ƒë√£ seed t·ª´ tr∆∞·ªõc)
// B·∫°n c√≥ th·ªÉ s·ª≠a/ƒë·ªïi/add theo th·ª±c t·∫ø
const EXPECTED_SUBJECT_CODES = ["CTDL", "GTLT", "CSDL", "WEB101", "HDH"];

/**
 * Ch·ªçn ra N m√¥n theo ki·ªÉu "xoay v√≤ng" ƒë·ªÉ m·ªói sinh vi√™n/term c√≥ b·ªô m√¥n kh√°c nhau
 * @param {Array<ObjectId>} subjectIds
 * @param {number} startIdx
 * @param {number} n
 * @returns {Array<ObjectId>}
 */
function pickSubjects(subjectIds, startIdx, n) {
  const len = subjectIds.length;
  const out = [];
  for (let j = 0; j < n; j++) {
    out.push(subjectIds[(startIdx + j) % len]);
  }
  return out;
}

/**
 * T·∫°o ƒëi·ªÉm "·ªïn ƒë·ªãnh" (deterministic) 6.0..10.0 d·ª±a theo index sinh vi√™n/m√¥n/k·ª≥
 */
function makeScore(iStudent, jSubject, tIndex) {
  const base = 6 + ((iStudent + jSubject + tIndex) % 5); // 6..10
  const withDecimal = Math.min(10, base + jSubject * 0.25); // th√™m 0.0/0.25/0.5
  return Math.round(withDecimal * 10) / 10;
}

(async () => {
  try {
    console.log("‚è≥ Connecting MongoDB...");
    await mongoose.connect(MONGO_URI);
    console.log("‚úÖ Connected");

    // L·∫•y to√†n b·ªô students & subjects
    const [students, subjects] = await Promise.all([
      Student.find().select("_id name studentId").sort({ createdAt: 1 }),
      Subject.find().select("_id name code credit").sort({ code: 1 }),
    ]);

    if (students.length === 0) {
      throw new Error("Ch∆∞a c√≥ Student n√†o. H√£y seed students tr∆∞·ªõc.");
    }
    if (subjects.length < 3) {
      throw new Error(
        "C·∫ßn √≠t nh·∫•t 3 Subject. H√£y seed subjects tr∆∞·ªõc (vd: CTDL, GTLT, CSDL, WEB101, HDH)."
      );
    }

    // (Tu·ª≥ ch·ªçn) C·∫£nh b√°o n·∫øu thi·∫øu c√°c subject code k·ª≥ v·ªçng
    const codesInDb = new Set(subjects.map((s) => s.code.toUpperCase()));
    const missing = EXPECTED_SUBJECT_CODES.filter((c) => !codesInDb.has(c));
    if (missing.length) {
      console.warn(
        "‚ö†Ô∏è Thi·∫øu c√°c subject code sau (kh√¥ng b·∫Øt bu·ªôc, ch·ªâ c·∫£nh b√°o):",
        missing.join(", ")
      );
    }

    // Xo√° ƒëi·ªÉm c≈© ƒë·ªÉ seed l·∫°i cho s·∫°ch
    await Score.deleteMany({});
    console.log("üßπ ƒê√£ xo√° to√†n b·ªô scores c≈©");

    // Danh s√°ch id m√¥n (·ªïn ƒë·ªãnh theo sort code)
    const subjectIds = subjects.map((s) => s._id);
    const scoresToInsert = [];

    // V·ªõi m·ªói sinh vi√™n, m·ªói k·ª≥ -> 3 m√¥n (xoay v√≤ng), ch·∫•m ƒëi·ªÉm ‚Äúƒë·∫πp‚Äù
    students.forEach((stu, i) => {
      TERMS.forEach((term, tIndex) => {
        const chosen = pickSubjects(
          subjectIds,
          (i + tIndex) % subjectIds.length,
          3
        );
        chosen.forEach((subId, j) => {
          scoresToInsert.push({
            studentId: stu._id,
            subjectId: subId,
            term,
            score: makeScore(i, j, tIndex), // 6.0..10.0
            note: j === 0 ? "Mid+Final" : undefined,
          });
        });
      });
    });

    // Ch√®n v√†o DB
    await Score.insertMany(scoresToInsert, { ordered: false });
    console.log(
      `üéâ Seed scores OK! Inserted: ${scoresToInsert.length} b·∫£n ghi`
    );
    console.log(
      `üìå Students: ${students.length}, Subjects: ${
        subjects.length
      }, Terms: ${TERMS.join(", ")}`
    );

    process.exit(0);
  } catch (e) {
    console.error("‚ùå Seed scores FAIL:", e.message || e);
    // N·∫øu d√≠nh unique index do ch·∫°y l·∫°i m√† ch∆∞a xo√°, nh·ªõ ƒë·ªÉ Score.deleteMany() ph√≠a tr√™n
    process.exit(1);
  }
})();
